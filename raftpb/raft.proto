// Copyright 2017 Lei Ni (nilei81@gmail.com).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless optional by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";
// Package raftpb contains definition of raft internal structs, states and
// messages that are not visible to typical dragonboat applications. It is
// required when building your customized LogDB and Raft RPC modules. You
// can safely ignore this package when building dragonboat applications. 
package raftpb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_enum_prefix_all) = false;

enum MessageType {
	LocalTick        = 0;
  Election         = 1;
	LeaderHeartbeat  = 2;
  ConfigChangeEvent= 3;
	NoOP             = 4;
  Ping             = 5;
  Pong             = 6;
  Propose          = 7;
  SnapshotStatus   = 8;
  Unreachable      = 9;
  CheckQuorum      = 10;
  BatchedReadIndex = 11;
	Replicate        = 12;
	ReplicateResp    = 13;
	RequestVote      = 14;
	RequestVoteResp  = 15;
	InstallSnapshot  = 16;
	Heartbeat        = 17;
	HeartbeatResp    = 18;
	ReadIndex        = 19;
	ReadIndexResp    = 20;
  Quiesce          = 21;
  SnapshotReceived = 22;
  LeaderTransfer   = 23;
  TimeoutNow       = 24;
  RateLimit        = 25;
}

enum EntryType {
	ApplicationEntry  = 0;
	ConfigChangeEntry = 1;
    EncodedEntry      = 2;
	MetadataEntry     = 3;
}

enum ConfigChangeType {
	AddNode     = 0;
  RemoveNode  = 1;
  AddObserver = 2;
  AddWitness = 3;
}

enum StateMachineType {
  UnknownStateMachine     = 0;
  RegularStateMachine     = 1;
  ConcurrentStateMachine  = 2;
  OnDiskStateMachine     = 3;
}

enum CompressionType {
  NoCompression = 0;
  Snappy = 1;
}

message Bootstrap {
  map<uint64, string> addresses   = 1;
  optional bool join              = 2 [(gogoproto.nullable) = false];
  optional StateMachineType Type  = 3 [(gogoproto.nullable) = false];
}

message RaftDataStatus {
  optional string address       = 1 [(gogoproto.nullable) = false];
  optional uint32 bin_ver       = 2 [(gogoproto.nullable) = false];
  optional uint64 hard_hash     = 3 [(gogoproto.nullable) = false];
  optional string logdb_type    = 4 [(gogoproto.nullable) = false];
  optional string hostname      = 5 [(gogoproto.nullable) = false];
  optional uint64 deployment_id = 6 [(gogoproto.nullable) = false]; 
  optional uint64 step_worker_count = 7 [(gogoproto.nullable) = false];
  optional uint64 logdb_shard_count = 8 [(gogoproto.nullable) = false];
  optional uint64 max_session_count = 9 [(gogoproto.nullable) = false];
  optional uint64 entry_batch_size = 10 [(gogoproto.nullable) = false];
  optional bool address_by_node_host_id = 11 [(gogoproto.nullable) = false];
}

message State {
	optional uint64 term   = 1 [(gogoproto.nullable) = false];
	optional uint64 vote   = 2 [(gogoproto.nullable) = false];
  optional uint64 commit = 3 [(gogoproto.nullable) = false];
}

message Entry {
	optional uint64     Term        = 1 [(gogoproto.nullable) = false];
	optional uint64     Index       = 2 [(gogoproto.nullable) = false];
	optional EntryType  Type        = 3 [(gogoproto.nullable) = false];
	optional uint64     Key         = 4 [(gogoproto.nullable) = false];
  optional uint64     ClientID    = 5 [(gogoproto.nullable) = false];
  optional uint64     SeriesID    = 6 [(gogoproto.nullable) = false];
  optional uint64     RespondedTo = 7 [(gogoproto.nullable) = false];
  optional bytes      Cmd         = 8;
}

message EntryBatch {
  repeated Entry entries          = 1 [(gogoproto.nullable) = false];
}

message Membership {
  optional uint64 config_change_id  = 1;
  map<uint64, string> addresses   = 2;
  map<uint64, bool> removed       = 3;
  map<uint64, string> observers   = 4;
  map<uint64, string> witnesses   = 5;
}

// field id 1 was used for optional string filename
message SnapshotFile {
  optional string filepath        = 2 [(gogoproto.nullable) = false];
  optional uint64 file_size       = 3 [(gogoproto.nullable) = false];
  optional uint64 file_id         = 4 [(gogoproto.nullable) = false];
  optional bytes metadata         = 5;
}

// field id 1 was used for optional string filename
message Snapshot {
	optional string filepath        = 2 [(gogoproto.nullable) = false];
  optional uint64 file_size       = 3 [(gogoproto.nullable) = false];
  optional uint64 index           = 4 [(gogoproto.nullable) = false];  
  optional uint64 term            = 5 [(gogoproto.nullable) = false];
  optional Membership membership  = 6 [(gogoproto.nullable) = false];
  repeated SnapshotFile files     = 7;
  optional bytes checksum         = 8;
  optional bool dummy             = 9  [(gogoproto.nullable) = false];
  optional uint64 cluster_id      = 10 [(gogoproto.nullable) = false];
  optional StateMachineType type  = 11 [(gogoproto.nullable) = false];
  optional bool imported          = 12 [(gogoproto.nullable) = false];
  optional uint64 on_disk_index   = 13 [(gogoproto.nullable) = false];
  optional bool witness           = 14 [(gogoproto.nullable) = false];
}

message Message {
	optional MessageType type        = 1  [(gogoproto.nullable) = false];
	optional uint64      to          = 2  [(gogoproto.nullable) = false];
	optional uint64      from        = 3  [(gogoproto.nullable) = false];
	optional uint64      cluster_id  = 4  [(gogoproto.nullable) = false];
  optional uint64      term        = 5  [(gogoproto.nullable) = false];
	optional uint64      log_term    = 6  [(gogoproto.nullable) = false];
	optional uint64      log_index   = 7  [(gogoproto.nullable) = false];
  optional uint64      commit      = 8  [(gogoproto.nullable) = false];
  optional bool        reject      = 9  [(gogoproto.nullable) = false];
	optional uint64      hint        = 10 [(gogoproto.nullable) = false];
	repeated Entry       entries     = 11 [(gogoproto.nullable) = false];
	optional Snapshot    snapshot    = 12 [(gogoproto.nullable) = false];	
  optional uint64      hint_high   = 13 [(gogoproto.nullable) = false];
}

message ConfigChange {
	optional uint64            config_change_id = 1 [(gogoproto.nullable) = false];
	optional ConfigChangeType  Type             = 2 [(gogoproto.nullable) = false];
	optional uint64            NodeID           = 3 [(gogoproto.nullable) = false];
	optional string            Address          = 4 [(gogoproto.nullable) = false];
  optional bool              Initialize       = 5 [(gogoproto.nullable) = false];
}

enum ChecksumType {
  CRC32IEEE   = 0;
  HIGHWAY     = 1;
}

message SnapshotHeader {
  optional uint64 session_size              = 1 [(gogoproto.nullable) = false];
  optional uint64 data_store_size           = 2 [(gogoproto.nullable) = false];
  optional uint64 unreliable_time           = 3 [(gogoproto.nullable) = false];
  optional string git_version               = 4 [(gogoproto.nullable) = false];
  optional bytes header_checksum            = 5 [(gogoproto.nullable) = false];
  optional bytes payload_checksum           = 6 [(gogoproto.nullable) = false];
  optional ChecksumType checksum_type       = 7 [(gogoproto.nullable) = false];
  optional uint64 version                   = 8 [(gogoproto.nullable) = false];
  optional CompressionType compression_type = 9 [(gogoproto.nullable) = false];
}

// dummy message used by grpc
message Response {}

message MessageBatch {
  repeated Message requests  				= 1 [(gogoproto.nullable) = false];
  optional uint64 deployment_id     = 2 [(gogoproto.nullable) = false];
  optional string source_address    = 3 [(gogoproto.nullable) = false];
  optional uint32 bin_ver           = 4 [(gogoproto.nullable) = false];
}

// field id 11 was used for optional string filename
message Chunk {
  optional uint64 cluster_id        = 1 [(gogoproto.nullable) = false];
  optional uint64 node_id           = 2 [(gogoproto.nullable) = false];
  optional uint64 from              = 3 [(gogoproto.nullable) = false];
  optional uint64 chunk_id          = 4 [(gogoproto.nullable) = false];
  optional uint64 chunk_size        = 5 [(gogoproto.nullable) = false];
  optional uint64 chunk_count       = 6 [(gogoproto.nullable) = false];
  optional bytes data               = 7;
  optional uint64 index             = 8 [(gogoproto.nullable) = false];
  optional uint64 term              = 9 [(gogoproto.nullable) = false];
  optional Membership membership   = 10 [(gogoproto.nullable) = false];
  optional string filepath         = 12 [(gogoproto.nullable) = false];
  optional uint64 file_size        = 13 [(gogoproto.nullable) = false];
  optional uint64 deployment_id    = 14 [(gogoproto.nullable) = false];
  optional uint64 file_chunk_id    = 15 [(gogoproto.nullable) = false];
  optional uint64 file_chunk_count = 16 [(gogoproto.nullable) = false];
  optional bool has_file_info      = 17 [(gogoproto.nullable) = false];
  optional SnapshotFile file_info  = 18 [(gogoproto.nullable) = false];
  optional uint32 bin_ver          = 19 [(gogoproto.nullable) = false];
  optional uint64 on_disk_index    = 20 [(gogoproto.nullable) = false];
  optional bool witness            = 21 [(gogoproto.nullable) = false]; 
}
